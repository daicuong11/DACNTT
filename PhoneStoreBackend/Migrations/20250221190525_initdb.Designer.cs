// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhoneStoreBackend.DbContexts;

#nullable disable

namespace PhoneStoreBackend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250221190525_initdb")]
    partial class initdb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Coupon", b =>
                {
                    b.Property<int>("CouponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CouponId"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPercentage")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxUsageCount")
                        .HasColumnType("int");

                    b.Property<decimal?>("MinimumOrderAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsedCount")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CouponId");

                    b.HasIndex("UserId");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.ActivityLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"), 1L, 1);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LogId");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityLogs");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"), 1L, 1);

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            BrandId = 1,
                            Description = "Thương hiệu cao cấp với iPhone, iPad, MacBook và phụ kiện",
                            ImageUrl = "https://example.com/images/apple.jpg",
                            Name = "Apple"
                        },
                        new
                        {
                            BrandId = 2,
                            Description = "Hãng công nghệ hàng đầu với điện thoại Galaxy, máy tính bảng và TV",
                            ImageUrl = "https://example.com/images/samsung.jpg",
                            Name = "Samsung"
                        },
                        new
                        {
                            BrandId = 3,
                            Description = "Thương hiệu giá rẻ với các sản phẩm điện thoại, tai nghe và thiết bị thông minh",
                            ImageUrl = "https://example.com/images/xiaomi.jpg",
                            Name = "Xiaomi"
                        },
                        new
                        {
                            BrandId = 4,
                            Description = "Chuyên về điện thoại chụp ảnh đẹp và công nghệ sạc nhanh",
                            ImageUrl = "https://example.com/images/oppo.jpg",
                            Name = "Oppo"
                        },
                        new
                        {
                            BrandId = 5,
                            Description = "Tập trung vào trải nghiệm âm thanh và camera cho điện thoại",
                            ImageUrl = "https://example.com/images/vivo.jpg",
                            Name = "Vivo"
                        },
                        new
                        {
                            BrandId = 6,
                            Description = "Thương hiệu con của Oppo với thiết bị giá rẻ nhưng mạnh mẽ",
                            ImageUrl = "https://example.com/images/realme.jpg",
                            Name = "Realme"
                        },
                        new
                        {
                            BrandId = 7,
                            Description = "Điện thoại cao cấp với hiệu năng mạnh và phần mềm mượt mà",
                            ImageUrl = "https://example.com/images/oneplus.jpg",
                            Name = "OnePlus"
                        },
                        new
                        {
                            BrandId = 8,
                            Description = "Chuyên về tai nghe, máy ảnh, loa và điện thoại Xperia",
                            ImageUrl = "https://example.com/images/sony.jpg",
                            Name = "Sony"
                        },
                        new
                        {
                            BrandId = 9,
                            Description = "Điện thoại bền bỉ với pin lâu và hệ điều hành Android gốc",
                            ImageUrl = "https://example.com/images/nokia.jpg",
                            Name = "Nokia"
                        },
                        new
                        {
                            BrandId = 10,
                            Description = "Nổi bật với dòng ROG Phone cho game thủ và laptop mạnh mẽ",
                            ImageUrl = "https://example.com/images/asus.jpg",
                            Name = "Asus"
                        });
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"), 1L, 1);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CartId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemId"), 1L, 1);

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Description = "Các mẫu điện thoại mới nhất và phổ biến",
                            ImageUrl = "https://example.com/images/smartphones.jpg",
                            Name = "Điện thoại"
                        },
                        new
                        {
                            CategoryId = 2,
                            Description = "Hiệu suất cao cho công việc và giải trí",
                            ImageUrl = "https://example.com/images/tablets.jpg",
                            Name = "Máy tính bảng"
                        },
                        new
                        {
                            CategoryId = 3,
                            Description = "Laptop mạnh mẽ đáp ứng mọi nhu cầu",
                            ImageUrl = "https://example.com/images/laptops.jpg",
                            Name = "Laptop"
                        },
                        new
                        {
                            CategoryId = 4,
                            Description = "Những phụ kiện thiết yếu cho thiết bị của bạn",
                            ImageUrl = "https://example.com/images/accessories.jpg",
                            Name = "Phụ kiện"
                        },
                        new
                        {
                            CategoryId = 5,
                            Description = "Luôn kết nối với đồng hồ thông minh mới nhất",
                            ImageUrl = "https://example.com/images/smartwatches.jpg",
                            Name = "Đồng hồ thông minh"
                        },
                        new
                        {
                            CategoryId = 6,
                            Description = "Trải nghiệm âm thanh chất lượng cao",
                            ImageUrl = "https://example.com/images/headphones.jpg",
                            Name = "Tai nghe"
                        },
                        new
                        {
                            CategoryId = 7,
                            Description = "Sạc nhanh và đáng tin cậy cho thiết bị của bạn",
                            ImageUrl = "https://example.com/images/chargers.jpg",
                            Name = "Sạc điện thoại"
                        },
                        new
                        {
                            CategoryId = 8,
                            Description = "Bảo vệ thiết bị với ốp lưng thời trang",
                            ImageUrl = "https://example.com/images/cases.jpg",
                            Name = "Ốp lưng & Bao da"
                        },
                        new
                        {
                            CategoryId = 9,
                            Description = "Loa Bluetooth di động và mạnh mẽ",
                            ImageUrl = "https://example.com/images/speakers.jpg",
                            Name = "Loa"
                        },
                        new
                        {
                            CategoryId = 10,
                            Description = "Mở rộng dung lượng lưu trữ với thẻ nhớ tốc độ cao",
                            ImageUrl = "https://example.com/images/memorycards.jpg",
                            Name = "Thẻ nhớ"
                        });
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CustomerId");

                    b.HasIndex("OrderId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountId"), 1L, 1);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DiscountId");

                    b.ToTable("Discounts");

                    b.HasData(
                        new
                        {
                            DiscountId = 1,
                            EndDate = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Percentage = 10m,
                            StartDate = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DiscountId = 2,
                            EndDate = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Percentage = 15m,
                            StartDate = new DateTime(2025, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DiscountId = 3,
                            EndDate = new DateTime(2025, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Percentage = 20m,
                            StartDate = new DateTime(2025, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DiscountId = 4,
                            EndDate = new DateTime(2025, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Percentage = 5m,
                            StartDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DiscountId = 5,
                            EndDate = new DateTime(2025, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Percentage = 25m,
                            StartDate = new DateTime(2025, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DiscountId = 6,
                            EndDate = new DateTime(2025, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Percentage = 30m,
                            StartDate = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DiscountId = 7,
                            EndDate = new DateTime(2025, 3, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Percentage = 12m,
                            StartDate = new DateTime(2025, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DiscountId = 8,
                            EndDate = new DateTime(2025, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Percentage = 18m,
                            StartDate = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DiscountId = 9,
                            EndDate = new DateTime(2025, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Percentage = 22m,
                            StartDate = new DateTime(2025, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DiscountId = 10,
                            EndDate = new DateTime(2025, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Percentage = 8m,
                            StartDate = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("NotificationId");

                    b.HasIndex("Id");

                    b.HasIndex("SenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShippingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ShippingFee")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("CouponId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"), 1L, 1);

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.ProductImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"), 1L, 1);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.HasKey("ImageId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.ProductSpecification", b =>
                {
                    b.Property<int>("SpecificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecificationId"), 1L, 1);

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsSpecial")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProductSpecificationGroupId")
                        .HasColumnType("int");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("SpecificationId");

                    b.HasIndex("ProductSpecificationGroupId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("ProductSpecifications");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.ProductSpecificationGroup", b =>
                {
                    b.Property<int>("ProductSpecificationGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductSpecificationGroupId"), 1L, 1);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ProductSpecificationGroupId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductSpecificationGroups");

                    b.HasData(
                        new
                        {
                            ProductSpecificationGroupId = 1,
                            CategoryId = 1,
                            DisplayOrder = 1,
                            GroupName = "Thiết kế & Màn hình"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 2,
                            CategoryId = 1,
                            DisplayOrder = 2,
                            GroupName = "Hiệu năng & Bộ nhớ"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 3,
                            CategoryId = 1,
                            DisplayOrder = 3,
                            GroupName = "Camera"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 4,
                            CategoryId = 1,
                            DisplayOrder = 4,
                            GroupName = "Pin & Sạc"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 5,
                            CategoryId = 1,
                            DisplayOrder = 5,
                            GroupName = "Kết nối & Cảm biến"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 6,
                            CategoryId = 1,
                            DisplayOrder = 6,
                            GroupName = "Hệ điều hành & Giao diện"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 7,
                            CategoryId = 1,
                            DisplayOrder = 7,
                            GroupName = "Âm thanh"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 8,
                            CategoryId = 1,
                            DisplayOrder = 8,
                            GroupName = "Phụ kiện đi kèm"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 9,
                            CategoryId = 2,
                            DisplayOrder = 1,
                            GroupName = "Màn hình"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 10,
                            CategoryId = 2,
                            DisplayOrder = 2,
                            GroupName = "Hiệu năng & Bộ nhớ"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 11,
                            CategoryId = 2,
                            DisplayOrder = 3,
                            GroupName = "Camera & Hỗ trợ bút"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 12,
                            CategoryId = 2,
                            DisplayOrder = 4,
                            GroupName = "Pin & Sạc"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 13,
                            CategoryId = 2,
                            DisplayOrder = 5,
                            GroupName = "Hệ điều hành & Kết nối"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 14,
                            CategoryId = 3,
                            DisplayOrder = 1,
                            GroupName = "Thiết kế & Màn hình"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 15,
                            CategoryId = 3,
                            DisplayOrder = 2,
                            GroupName = "Hiệu năng & Tản nhiệt"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 16,
                            CategoryId = 3,
                            DisplayOrder = 3,
                            GroupName = "Bàn phím & Touchpad"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 17,
                            CategoryId = 3,
                            DisplayOrder = 4,
                            GroupName = "Pin & Cổng kết nối"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 18,
                            CategoryId = 3,
                            DisplayOrder = 5,
                            GroupName = "Hệ điều hành & Phần mềm"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 19,
                            CategoryId = 4,
                            DisplayOrder = 1,
                            GroupName = "Màn hình & Chất lượng âm thanh"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 20,
                            CategoryId = 4,
                            DisplayOrder = 2,
                            GroupName = "Hiệu suất & Đồ họa"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 21,
                            CategoryId = 4,
                            DisplayOrder = 3,
                            GroupName = "Pin & Thời gian sử dụng"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 22,
                            CategoryId = 4,
                            DisplayOrder = 4,
                            GroupName = "Hệ điều hành & Ứng dụng"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 23,
                            CategoryId = 5,
                            DisplayOrder = 1,
                            GroupName = "Tính năng & Công nghệ"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 24,
                            CategoryId = 5,
                            DisplayOrder = 2,
                            GroupName = "Màn hình & Hiển thị"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 25,
                            CategoryId = 5,
                            DisplayOrder = 3,
                            GroupName = "Thời lượng pin & Sạc"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 26,
                            CategoryId = 5,
                            DisplayOrder = 4,
                            GroupName = "Kết nối & Tiện ích"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 27,
                            CategoryId = 6,
                            DisplayOrder = 1,
                            GroupName = "Tính năng & Công nghệ"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 28,
                            CategoryId = 6,
                            DisplayOrder = 2,
                            GroupName = "Thời lượng pin & Sạc"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 29,
                            CategoryId = 6,
                            DisplayOrder = 3,
                            GroupName = "Thiết kế & Khả năng chống ồn"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 30,
                            CategoryId = 6,
                            DisplayOrder = 4,
                            GroupName = "Kết nối & Điều khiển"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 31,
                            CategoryId = 7,
                            DisplayOrder = 1,
                            GroupName = "Kích thước & Trọng lượng"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 32,
                            CategoryId = 7,
                            DisplayOrder = 2,
                            GroupName = "Công nghệ hiển thị"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 33,
                            CategoryId = 7,
                            DisplayOrder = 3,
                            GroupName = "Hệ điều hành & Ứng dụng"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 34,
                            CategoryId = 7,
                            DisplayOrder = 4,
                            GroupName = "Kết nối & Tiện ích"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 35,
                            CategoryId = 8,
                            DisplayOrder = 1,
                            GroupName = "Hiệu suất & Lưu trữ"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 36,
                            CategoryId = 8,
                            DisplayOrder = 2,
                            GroupName = "Kết nối & Cảm biến"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 37,
                            CategoryId = 8,
                            DisplayOrder = 3,
                            GroupName = "Tính năng thông minh"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 38,
                            CategoryId = 8,
                            DisplayOrder = 4,
                            GroupName = "Độ bền & Chống nước"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 39,
                            CategoryId = 9,
                            DisplayOrder = 1,
                            GroupName = "Dung lượng & Chuẩn tốc độ"
                        },
                        new
                        {
                            ProductSpecificationGroupId = 40,
                            CategoryId = 9,
                            DisplayOrder = 2,
                            GroupName = "Kết nối & Bảo mật"
                        });
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.ProductVariant", b =>
                {
                    b.Property<int>("ProductVariantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductVariantId"), 1L, 1);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ImportPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("Storage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VariantName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ProductVariantId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariants");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsGoogleAccount")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.Wishlist", b =>
                {
                    b.Property<int>("WishlistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WishlistId"), 1L, 1);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("WishlistId");

                    b.HasIndex("UserId");

                    b.ToTable("Wishlists");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.WishlistItem", b =>
                {
                    b.Property<int>("WishlistItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WishlistItemId"), 1L, 1);

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("WishlistId")
                        .HasColumnType("int");

                    b.HasKey("WishlistItemId");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("WishlistId");

                    b.ToTable("WishlistItems");
                });

            modelBuilder.Entity("Coupon", b =>
                {
                    b.HasOne("PhoneStoreBackend.Entities.User", "User")
                        .WithMany("Coupons")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.ActivityLog", b =>
                {
                    b.HasOne("PhoneStoreBackend.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.Address", b =>
                {
                    b.HasOne("PhoneStoreBackend.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.Cart", b =>
                {
                    b.HasOne("PhoneStoreBackend.Entities.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.CartItem", b =>
                {
                    b.HasOne("PhoneStoreBackend.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhoneStoreBackend.Entities.ProductVariant", "ProductVariant")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.Customer", b =>
                {
                    b.HasOne("PhoneStoreBackend.Entities.Order", null)
                        .WithMany("Customers")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.Notification", b =>
                {
                    b.HasOne("PhoneStoreBackend.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhoneStoreBackend.Entities.User", "Sender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.Order", b =>
                {
                    b.HasOne("Coupon", "Coupon")
                        .WithMany("Orders")
                        .HasForeignKey("CouponId");

                    b.HasOne("PhoneStoreBackend.Entities.Customer", "Customer")
                        .WithOne("Order")
                        .HasForeignKey("PhoneStoreBackend.Entities.Order", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhoneStoreBackend.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.OrderDetail", b =>
                {
                    b.HasOne("PhoneStoreBackend.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhoneStoreBackend.Entities.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.Payment", b =>
                {
                    b.HasOne("PhoneStoreBackend.Entities.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("PhoneStoreBackend.Entities.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.Product", b =>
                {
                    b.HasOne("PhoneStoreBackend.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhoneStoreBackend.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.ProductImage", b =>
                {
                    b.HasOne("PhoneStoreBackend.Entities.ProductVariant", "ProductVariant")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.ProductSpecification", b =>
                {
                    b.HasOne("PhoneStoreBackend.Entities.ProductSpecificationGroup", "ProductSpecificationGroup")
                        .WithMany("ProductSpecifications")
                        .HasForeignKey("ProductSpecificationGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhoneStoreBackend.Entities.ProductVariant", "ProductVariant")
                        .WithMany("ProductSpecifications")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProductSpecificationGroup");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.ProductSpecificationGroup", b =>
                {
                    b.HasOne("PhoneStoreBackend.Entities.Category", "Category")
                        .WithMany("ProductSpecificationGroups")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.ProductVariant", b =>
                {
                    b.HasOne("PhoneStoreBackend.Entities.Discount", "Discount")
                        .WithMany("Products")
                        .HasForeignKey("DiscountId");

                    b.HasOne("PhoneStoreBackend.Entities.Product", "Product")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.Review", b =>
                {
                    b.HasOne("PhoneStoreBackend.Entities.ProductVariant", "ProductVariant")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhoneStoreBackend.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductVariant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.Wishlist", b =>
                {
                    b.HasOne("PhoneStoreBackend.Entities.User", "User")
                        .WithMany("Wishlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.WishlistItem", b =>
                {
                    b.HasOne("PhoneStoreBackend.Entities.ProductVariant", "ProductVariant")
                        .WithMany("WishlistItems")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhoneStoreBackend.Entities.Wishlist", "Wishlist")
                        .WithMany("WishlistItems")
                        .HasForeignKey("WishlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductVariant");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("Coupon", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.Category", b =>
                {
                    b.Navigation("ProductSpecificationGroups");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.Customer", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.Discount", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.Order", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("OrderDetails");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.Product", b =>
                {
                    b.Navigation("ProductVariants");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.ProductSpecificationGroup", b =>
                {
                    b.Navigation("ProductSpecifications");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.ProductVariant", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductSpecifications");

                    b.Navigation("Reviews");

                    b.Navigation("WishlistItems");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Carts");

                    b.Navigation("Coupons");

                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("SentNotifications");

                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("PhoneStoreBackend.Entities.Wishlist", b =>
                {
                    b.Navigation("WishlistItems");
                });
#pragma warning restore 612, 618
        }
    }
}
